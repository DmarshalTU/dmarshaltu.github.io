<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Denis Tu</title><link>https://dmarshaltu.github.io/</link><description>CodeWizard</description><copyright>Denis Tu</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/59089266?v=4</url><title>avatar</title><link>https://dmarshaltu.github.io/</link></image><lastBuildDate>Sat, 13 Jan 2024 14:51:15 +0000</lastBuildDate><managingEditor>Denis Tu</managingEditor><pubDate>Sat, 13 Jan 2024 14:51:15 +0000</pubDate><ttl>60</ttl><webMaster>Denis Tu</webMaster><item><title>OpenAI Crystal Library A Tiny Dall-E 3 UI for your homelab</title><link>https://dmarshaltu.github.io//post/OpenAI%20Crystal%20Library%20A%20Tiny%20Dall-E%203%20UI%20for%20your%C2%A0homelab.html</link><description>&#13;
![opanaicr](&#13;
![](https://miro.medium.com/v2/resize:fit:1400/format:webp/1*FpWQ8XB29XIplUJNMkAm0Q.png)&#13;
)&#13;
&#13;
[Simon Marache](https://github.com/Blizarre) [MicroDalle](https://github.com/Blizarre/microdalle.git) project suited me very well because of his use of the openai library in Python and flask, at first glance the project seemed lost because I could not find any library that allowed me to work with the chatgpt api, on the other hand I did not know in crystal any framework for building servers and worst of all I haven't written anything for more than 3 months because of reserve service and I really had no desire to go back to sitting in front of the computer and especially not writing code.&#13;
But this project gave me back my desire to explore and opened up a new horizon, to take a rich, easy-to-learn language and write the libraries and the project myself without just importing existing things, on one screen the library with the debugger and on the other side the server that is based on the same library, because I immersed myself in the crystal syntax and in the book The only one I found was "Crystal Programming" by George Dietrich and both projects were written as one.&#13;
Another good thing in my experience along the way is learning to work with [Kemal](https://kemalcr.com/), Lightning Fast, Super Simple web framework.&#13;
&#13;
GitHub [MicroDalle_cr](https://github.com/DmarshalTU/microdallecr.git)&#13;
&#13;
As I wrote in the previous article about [OpenAI Crystal Library: Bridging Machine Learning and the Crystal Language](https://medium.com/@denismarshalltumakov/openai-crystal-library-bridging-machine-learning-and-the-crystal-language-f88a9536ba0b), the OpenAI Crystal Library is focused on providing a straightforward and efficient interface for integrating OpenAI's machine learning capabilities with Crystal-based applications. It's not about reinventing the wheel; it's about building solid connections between existing technologies and learn new things.&#13;
&#13;
The project made me promote the library and also add the possibility of working with photos and not just as a chat, this is what came out.&#13;
&#13;
GitHub [OpenAI_CR](https://github.com/DmarshalTU/openai.git)&#13;
&#13;
```crystal&#13;
require "openai"&#13;
&#13;
Log.setup_from_env&#13;
&#13;
OPENAI_KEY = "xxxxxxxxxx"&#13;
client = OpenAI::Client.new(OPENAI_KEY)&#13;
&#13;
response = client.create_image_completion("dall-e-3", "image description", size, hd, 1)&#13;
```&#13;
&#13;
in the future if this library will get to [ShardBox](https://shardbox.org/), it can be imported via dependencies:&#13;
```yaml&#13;
dependencies:&#13;
  openai:&#13;
    github: dmarshaltu/openai&#13;
```&#13;
&#13;
The journey has just begun and there is still a long way to go.。</description><guid isPermaLink="true">https://dmarshaltu.github.io//post/OpenAI%20Crystal%20Library%20A%20Tiny%20Dall-E%203%20UI%20for%20your%C2%A0homelab.html</guid><pubDate>Sat, 13 Jan 2024 14:49:35 +0000</pubDate></item><item><title>Streamlining DevOps with Crystal: Introducing the `cWizard` CLI</title><link>https://dmarshaltu.github.io//post/Streamlining%20DevOps%20with%20Crystal%3A%20Introducing%20the%20%60cWizard%60%20CLI.html</link><description>In a recent post, ["Crystal: A Shining Choice for DevOps"](https://medium.com/@denismarshalltumakov/crystal-a-shining-choice-for-devops-83d1e158cfe3), we explored why the `Crystal` programming language is an excellent tool for DevOps practitioners. Building on this theme, I'm excited to introduce a new project that exemplifies Crystal's strengths: the `cWizard` CLI.&#13;
&#13;
&lt;img width="836" alt="cWizard" src="https://github.com/DmarshalTU/dmarshaltu.github.io/assets/59089266/46c32a9b-19da-4c79-b142-1f90928b6170"&gt;&#13;
&#13;
&#13;
The `cWizard` CLI: Docker and Kubernetes Made Simpler&#13;
The `cWizard` Command Line Interface (CLI) is a testament to Crystal's capabilities in creating powerful DevOps tools. This CLI streamlines Docker and Kubernetes management, offering an interactive, menu-driven interface that simplifies complex container orchestration tasks.&#13;
&#13;
## Why Crystal for `cWizard` CLI?&#13;
&#13;
Performance and Efficiency: Crystal's syntax is not just elegant; it's also efficient. It compiles down to fast, low-level code, making `cWizard` CLI incredibly speedy and responsive.&#13;
Type Safety with Ease: One of Crystal's crown jewels is its type inference system, which guarantees type safety without the overhead of repetitive type annotations. This means fewer bugs and smoother maintenance for tools like the `cWizard` CLI.&#13;
Developer Friendliness: Crystal's Ruby-like syntax makes it approachable. Writing a CLI tool that interacts with complex systems like Docker and Kubernetes becomes less daunting and more enjoyable.&#13;
Features of `cWizard` CLI&#13;
The `cWizard` CLI isn't just another command-line tool; it's a comprehensive solution for managing Docker and Kubernetes environments. Key features include:&#13;
&#13;
* `Docker Management`: List images and containers with ease.&#13;
* `Kubernetes Operations`: From viewing pod logs to managing deployments and resources, all Kubernetes tasks are simplified.&#13;
* `Extensibility`: Users can extend the CLI with custom plugins, thanks to Crystal's flexible nature.&#13;
&#13;
## A Real-World Application&#13;
&#13;
[Github](https://github.com/DmarshalTU/cWizard)&#13;
&#13;
To demonstrate how Crystal can be leveraged in a real-world scenario, let's delve into a key functionality of the `cWizard` CLI: Kubernetes logs viewing. In traditional scenarios, viewing logs might require multiple kubectl commands. `cWizard` CLI simplifies this into a single menu choice, abstracting the complexity and streamlining the user's workflow.&#13;
&#13;
### Bridging the Gap&#13;
&#13;
One of the challenges in the DevOps field is the gap between developing applications and managing their deployment and operation. Crystal, with its developer-friendly syntax and robust performance, bridges this gap. Tools like the `cWizard` CLI, developed in Crystal, bring complex orchestration tasks into a more manageable realm.&#13;
&#13;
### Future Directions&#13;
&#13;
As the `cWizard` CLI project evolves, it will continue to showcase Crystal's adaptability and strength in creating DevOps tools. The project aims to constantly incorporate feedback and new ideas, embodying the dynamic and ever-evolving nature of DevOps.&#13;
&#13;
### Conclusion&#13;
&#13;
The `cWizard` CLI is more than just a project; it's a showcase of how Crystal can revolutionize the way we approach DevOps tasks. By bringing together ease of use, performance, and extendibility, it stands as a beacon for anyone looking to explore the intersection of development and operations.&#13;
&#13;
As we continue to explore Crystal's potential in the DevOps world, the `cWizard` CLI serves as a practical example of how this elegant language can lead to powerful, efficient, and enjoyable software.。</description><guid isPermaLink="true">https://dmarshaltu.github.io//post/Streamlining%20DevOps%20with%20Crystal%3A%20Introducing%20the%20%60cWizard%60%20CLI.html</guid><pubDate>Mon, 08 Jan 2024 06:43:26 +0000</pubDate></item></channel></rss>